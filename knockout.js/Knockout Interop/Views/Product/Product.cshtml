@{
    ViewBag.Title = "Product's List";
}

@section scripts {
    <style type="text/css">
        body {
            font-family: "Arial", "Helventica", sans-serif;
            margin: 20px;
        }

        label {
            display: inline-block;
            width: 80px;
        }

        button {
            background: #1276bb;
            border: solid 1px #006fb9;
            color: #fef4e9;
            cursor: pointer;
            display: inline-block;
            outline: none;
            padding: .4em 1.1em .4em;
            text-align: center;
            text-decoration: none;
        }

        button:hover {
            background: #282828;
            border: solid 1px #000;
            text-decoration: none;
        }

        table { padding-top: 1em; }

        thead, tfoot { font-weight: 600; }

        th, td {
            padding: .1em .5em;
            text-align: left;
        }

        td li, td ul {
            margin: 0;
            padding: 0;
        }

        td li { display: inline; }

        td li::after { content: ','; }

        td li:last-child::after { content: ''; }
    </style>
    <script src="~/Scripts/knockout-2.2.0.js"></script>
    <script src="@Url.Content("~/Scripts/knockout-2.2.0.debug.js")" type="text/javascript"></script>
    <script type="text/javascript">

        function formatCurrency(value) {
            return '$' + value.toFixed(2);
        }

        function ProductViewModel() {

            //Make the self as 'this' reference
            var self = this;
            //Declare observable which will be bind with UI
            self.Id = ko.observable('');
            self.Name = ko.observable('');
            self.Price = ko.observable('');
            self.Category = ko.observable('');

            var product = {
                Id: self.Id,
                Name: self.Name,
                Price: self.Price,
                Category: self.Category
            };

            self.Product = ko.observable();
            self.Products = ko.observableArray(); // Contains the list of products

            // Initialize the view-model
            $.ajax({
                url: '@Url.Action("GetAllProducts", "Product")',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function(data) {
                    self.Products(data); //Put the response in ObservableArray
                }
            });

            // Calculate Total of Price After Initialization
            self.Total = ko.computed(function() {
                var sum = 0;
                var arr = self.Products();
                for (var i = 0; i < arr.length; i++) {
                    sum += arr[i].Price;
                }
                return sum;
            });

            //Add New Item
            self.create = function() {
                if (product.Name() !== '' && product.Price() !== '' && product.Category() !== '') {
                    $.ajax({
                        url: '@Url.Action("AddProduct", "Product")',
                        cache: false,
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        data: ko.toJSON(product),
                        success: function(data) {
                            // alert('added');
                            self.Products.push(data);
                            self.Name('');
                            self.Price('');
                            self.Category('');

                        }
                    }).fail(
                        function(xhr, textStatus, err) {
                            alert(err);
                        });

                } else {
                    alert('Please Enter All the Values !!');
                }

            };

            // Delete product details
            self.delete = function(aProduct) {
                if (confirm('Are you sure to Delete "' + aProduct.Name + '" product ??')) {
                    var id = aProduct.Id;

                    $.ajax({
                        url: '@Url.Action("AddProduct", "Product")',
                        cache: false,
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        data: ko.toJSON(id),
                        success: function(/*data*/) {
                            self.Products.remove(aProduct);
                            //   alert("Record Deleted Successfully");
                        }
                    }).fail(
                        function(xhr, textStatus, err) {
                            alert(err);
                        });
                }
            }; // Edit product details

            self.edit = function(productToEdit) {
                self.Product(productToEdit);

            }; // Update product details
            self.update = function() {
                var productToUpdate = self.Product();

                $.ajax({
                        url: '@Url.Action("EditProduct", "Product")',
                        cache: false,
                        type: 'PUT',
                        contentType: 'application/json; charset=utf-8',
                        data: ko.toJSON(productToUpdate),
                        success: function(data) {
                            self.Products.removeAll();
                            self.Products(data); //Put the response in ObservableArray
                            self.Product(null);
                            alert('Record Updated Successfully');

                        }
                    })
                    .fail(
                        function(xhr, textStatus, err) {
                            alert(err);
                        });
            }; // Reset product details
            self.reset = function() {
                self.Name('');
                self.Price('');
                self.Category('');
            }; // Cancel product details

            self.cancel = function() {
                self.Product(null);

            };
        }

        var viewModel = new ProductViewModel();
        ko.applyBindings(viewModel);

    </script>
}


<div id="body">

    <h2>Knockout CRUD Operations with MVC4</h2>

    <h3>List of Products</h3>

    <table id="products1" data-bind="visible: Products().length > 0">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody data-bind="foreach: Products">
        <tr>
            <td data-bind="text: Id"></td>
            <td data-bind="text: Name"></td>
            <td data-bind="text: Category"></td>
            <td data-bind="text: formatCurrency(Price)"></td>

            <td>
                <button data-bind="click: $root.edit">Edit</button>
                <button data-bind="click: $root.delete">Delete</button>

            </td>

        </tr>
        </tbody>
        <tfoot>
        <tr>
            <td></td>
            <td></td>
            <td>Total :</td>
            <td data-bind="text: formatCurrency($root.Total())"></td>
            <td></td>
        </tr>
        </tfoot>
    </table>
    <br/>
    <div style="border-top: solid 2px #282828; height: 10px; width: 430px;">&nbsp;</div>

    <div data-bind="if: Product">
        <div>
            <h2>Update Product</h2>
        </div>
        <div>
            <label for="productId" data-bind="visible: false">ID</label>
            <label id="productId" data-bind="text: Product().Id, visible: false"></label>

        </div>
        <div>
            <label for="name">Name</label>
            <input id="name" data-bind="value: Product().Name" type="text" title="Name"/>
        </div>

        <div>
            <label for="category">Category</label>
            <input id="category" data-bind="value: Product().Category" type="text" title="Category"/>
        </div>

        <div>
            <label for="price">Price</label>
            <input id="price" data-bind="value: Product().Price" type="text" title="Price"/>

        </div>
        <br/>
        <div>
            <button data-bind="click: $root.update">Update</button>
            <button data-bind="click: $root.cancel">Cancel</button>
        </div>
    </div>

    <div data-bind="ifnot: Product()">
        <div>
            <h2>Add New Product</h2>
        </div>
        <div>
            <label for="name">Name</label>
            <input data-bind="value: $root.Name" type="text" title="Name"/>
        </div>

        <div>
            <label for="category">Category</label>
            <input data-bind="value: $root.Category" type="text" title="Category"/>
        </div>

        <div>
            <label for="price">Price</label>
            <input data-bind="value: $root.Price" type="text" title="Price"/>
        </div>
        <br/>
        <div>
            <button data-bind="click: $root.create">Save</button>
            <button data-bind="click: $root.reset">Reset</button>
        </div>
    </div>

</div>